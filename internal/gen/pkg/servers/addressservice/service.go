// Code generated by sysl DO NOT EDIT.
package addressservice

import (
	"context"
	"fmt"
	"net/http"
	"net/url"

	"github.com/anz-bank/sysl-go/common"
	"github.com/anz-bank/sysl-go/restlib"
	"github.com/anz-bank/sysl-go/validator"
)

// Service interface for addressservice
type Service interface {
	GetAddressCheckList(ctx context.Context, req *GetAddressCheckListRequest) (*Address, error)
}

// Client for addressservice API
type Client struct {
	Client  *http.Client
	URL     string
	Headers map[string][]string
}

// NewClient for addressservice
func NewClient(client *http.Client, serviceURL string) *Client {
	return &Client{client, serviceURL, nil}
}

// GetAddressCheckList ...
func (s *Client) GetAddressCheckList(ctx context.Context, req *GetAddressCheckListRequest) (*Address, error) {
	required := []string{}
	var okResponse Address
	u, err := url.Parse(fmt.Sprintf("%s/address-check", s.URL))
	if err != nil {
		return nil, common.CreateError(ctx, common.InternalError, "failed to parse url", err)
	}

	result, err := restlib.DoHTTPRequest2(ctx, &restlib.HTTPRequest{
		Client:        s.Client,
		Method:        "GET",
		URLString:     u.String(),
		Body:          nil,
		Required:      required,
		OKResponse:    &okResponse,
		ErrorResponse: nil,
		ExtraHeaders:  nil,
	})
	restlib.OnRestResultHTTPResult(ctx, result, err)
	if err != nil {
		return nil, common.CreateError(ctx, common.DownstreamUnavailableError, "call failed: addressservice <- GET "+u.String(), err)
	}

	if result.HTTPResponse.StatusCode == http.StatusUnauthorized {
		return nil, common.CreateDownstreamError(ctx, common.DownstreamUnauthorizedError, result.HTTPResponse, result.Body, nil)
	}
	OkAddressResponse, ok := result.Response.(*Address)
	if ok {
		valErr := validator.Validate(OkAddressResponse)
		if valErr != nil {
			return nil, common.CreateDownstreamError(ctx, common.DownstreamUnexpectedResponseError, result.HTTPResponse, result.Body, valErr)
		}

		return OkAddressResponse, nil
	}
	return nil, common.CreateDownstreamError(ctx, common.DownstreamUnexpectedResponseError, result.HTTPResponse, result.Body, nil)
}
